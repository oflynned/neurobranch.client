# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Actor = Investigator | Participant

union Response = CheckboxResponse | RadioResponse | ScaleResponse | TextResponse

type Audit {
  action: String!
  id: ID!
  performedAt: Timestamp!
  performedBy: Actor
}

type AuditConnection {
  edges: [AuditEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AuditEdge {
  cursor: Cursor!
  node: Audit
}

type CheckboxResponse {
  choices: [Choice!]
  id: ID!
  respondent: Participant
  responses: [Choice!]
  type: QuestionType!
}

type Choice {
  id: ID!
  index: Int!
}

type Investigator {
  auditLog: AuditConnection
  createdAt: Timestamp!
  dateOfBirth: String!
  deletedAt: Timestamp
  email: String!
  id: ID!
  name: String!
  sex: Sex!
  trials(pagination: PaginationArgs): TrialConnection
  verifiedAt: Timestamp
}

type InvestigatorConnection {
  edges: [InvestigatorEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type InvestigatorEdge {
  cursor: Cursor!
  node: Trial
}

type Mutation {
  createInvestigator(input: CreateInvestigatorInput): Investigator
  createTrial(input: CreateTrialInput): Trial
}

type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Participant {
  auditLog: AuditConnection
  createdAt: Timestamp!
  deletedAt: Timestamp
  email: String!
  id: ID!
  name: String!
  username: String!
  verifiedAt: Timestamp
}

type ParticipantConnection {
  edges: [ParticipantEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ParticipantEdge {
  cursor: Cursor!
  node: Participant
}

type Query {
  createParticipantAccount(input: ParticipantInput): Participant
  getEligibleTrials: TrialConnection
  getInvestigator: Investigator
  getTrial(trialId: String!): Trial
}

type Question {
  choices: [Choice!]
  id: ID!
  optional: Boolean!
  title: String!
  trial: Trial
  type: QuestionType!
}

type RadioResponse {
  choices: [Choice!]
  id: ID!
  respondent: Participant
  response: Choice
  type: QuestionType!
}

type ResponseConnection {
  edges: [ResponseEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResponseEdge {
  cursor: Cursor!
  node: Response
}

type ScaleResponse {
  id: ID!
  respondent: Participant
  response: Float!
  type: QuestionType!
}

type TextResponse {
  id: ID!
  respondent: Participant
  response: String!
  type: QuestionType!
}

type Trial {
  auditLog: AuditConnection
  createdAt: Timestamp!
  deletedAt: Timestamp
  description: String!
  endTime: Timestamp!
  frequency: Frequency!
  id: ID!
  investigators: InvestigatorConnection
  lead: Investigator
  participants: ParticipantConnection
  questions: [Question!]
  startTime: Timestamp!
  synopsis: String!
  tags: [String!]!
  title: String!
}

type TrialConnection {
  edges: [TrialEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TrialEdge {
  cursor: Cursor!
  node: Trial
}

enum Frequency {
  DAILY
  FORTNIGHTLY
  MONTHLY
  WEEKLY
}

enum QuestionType {
  CHECKBOX
  RADIO
  SCALE
  TEXT
}

enum Sex {
  FEMALE
  MALE
  OTHER
}

input CreateInvestigatorInput {
  dateOfBirth: String!
  name: String!
  sex: Sex!
}

input CreateTrialInput {
  description: String!
  duration: Int!
  frequency: Frequency!
  startTime: Timestamp!
  synopsis: String!
  tags: [String!]!
  title: String!
}

input PaginationArgs {
  after: Cursor
  first: Int
}

input ParticipantInput {
  dateOfBirth: String!
  email: String!
  name: String!
  username: String!
}


scalar Timestamp

scalar Cursor
